import state.Server
import states.SaturatedServerState
import states.StartServerState
import states.StartingServerState
import states.StopServerState
import java.awt.event.ActionEvent
import java.io.OutputStream
import java.io.PrintStream
import javax.swing.*

class ServerPanel : JPanel() {
    private val server: Server
    private var messageCounter = 0

    private inner class TextAreaPrinter(out: OutputStream?) : PrintStream(out, true) {
        override fun print(line: String) {
            println(line)
        }

        override fun println(line: String) {
            var line = line
            line = line + "\n"
            super.print(line)
            jTextArea1!!.append(line)
            jTextArea1!!.caretPosition = jTextArea1!!.document.length
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        jPanel1 = JPanel()
        jLabel5 = JLabel()
        jScrollPane1 = JScrollPane()
        jTextArea1 = JTextArea()
        btnSendMessage = JButton()
        btnStart = JButton()
        border = BorderFactory.createEtchedBorder()
        jPanel1!!.border = BorderFactory.createEtchedBorder()
        jPanel1!!.alignmentY = 0.0f
        jPanel1!!.layout = BoxLayout(jPanel1, BoxLayout.Y_AXIS)
        jPanel1!!.add(jLabel5)
        jTextArea1!!.columns = 20
        jTextArea1!!.rows = 5
        jScrollPane1!!.setViewportView(jTextArea1)
        jPanel1!!.add(jScrollPane1)
        btnSendMessage!!.text = "sendMessage"
        btnSendMessage!!.addActionListener { evt -> sendMessageEvent(evt) }
        btnStart!!.text = "Start"
        btnStart!!.addActionListener { evt -> startAction(evt) }
        var layout = GroupLayout(this)
        layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE.toInt())
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(
                                            btnStart, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                                            Short.MAX_VALUE.toInt()
                                        )
                                )
                                .addComponent(
                                    btnSendMessage, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(btnStart, GroupLayout.PREFERRED_SIZE, 64, GroupLayout.PREFERRED_SIZE)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE.toInt())
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSendMessage)
                        .addContainerGap()
                )
        )
    } // </editor-fold>//GEN-END:initComponents

    private fun sendMessageEvent(evt: ActionEvent) { //GEN-FIRST:event_sendMessageEvent
        // TODO add your handling code here:
        if (server.getState() is StartServerState || server.getState() is SaturatedServerState) {
            val message = "Message " + ++messageCounter
            server.handleMessage(message)
            println("Message sent: $message")
        } else {
            println("Server is not in a valid state to send messages.")
        }
    } //GEN-LAST:event_sendMessageEvent

    private fun startAction(evt: ActionEvent) { //GEN-FIRST:event_startAction
        // TODO add your handling code here:
        val state = server.getState()
        if (state is StopServerState) {
            btnStart!!.text = "Stop"
            server.setState(StartingServerState(server))
        } else if (state is StartServerState) {
            btnStart!!.text = "Start"
            server.setState(StopServerState(server))
        }
    } //GEN-LAST:event_startAction

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var btnSendMessage: JButton? = null
    private var btnStart: JButton? = null
    private var jLabel5: JLabel? = null
    private var jPanel1: JPanel? = null
    private var jScrollPane1: JScrollPane? = null
    private var jTextArea1: JTextArea? = null // End of variables declaration//GEN-END:variables

    init {
        initComponents()
        val defaultPrinter = System.out
        val interceptor: PrintStream = TextAreaPrinter(defaultPrinter)
        System.setOut(interceptor)
        server = Server()
    }
}
